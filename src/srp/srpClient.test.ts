import { BigInteger } from "jsbn";
import { knownGroups, SrpGroup } from "./srpGroup";
import { createHash } from "node:crypto";
const zero = new BigInteger("0");

interface Params {
  ephemeralPrivate: BigInteger;
  ephemeralPublicB: BigInteger;
  k: BigInteger;
  x: BigInteger;
  u: BigInteger;
  group: SrpGroup;
}

const getKey = (params: Params): Uint8Array => {
  const { ephemeralPrivate, ephemeralPublicB, k, x, u, group } = params;

  if (ephemeralPrivate.compareTo(zero) === 0) {
    throw new Error("cannot make Key with my ephemeral secret");
  }

  let b: BigInteger;
  let e: BigInteger;

  if (
    ephemeralPublicB.compareTo(zero) === 0 ||
    k.compareTo(zero) === 0 ||
    x.compareTo(zero) === 0
  ) {
    throw new Error("not enough is known to create Key");
  }

  e = u.multiply(x);
  console.log("e after u*x:", e.toString());
  e = e.add(ephemeralPrivate);
  console.log("e after e+ephemeralPrivate:", e.toString());

  if (!group) {
    throw new Error("group is not set");
  }

  b = group.getGenerator().modPow(x, group.getN().abs());
  console.log("b after generator^x mod N:", b.toString());
  b = b.multiply(k);
  console.log("b after b*k:", b.toString());
  b = ephemeralPublicB.subtract(b);
  console.log("b after b-ephemeralPublicB:", b.toString());
  b = b.mod(group.getN());
  console.log("b after b mod N:", b.toString());
  const premasterKey = b.modPow(e, group.getN().abs());
  console.log("premasterKey:", premasterKey.toString());

  const hash = createHash("sha256");
  hash.update(new TextEncoder().encode(premasterKey.toString(16)));
  return new Uint8Array(hash.digest());
};

const testEphemeralPrivate = new BigInteger(
  "10719651077722882965896972234020351926886590831097600849631591987425928965559095459129735287346721147910879660424021"
);
const testU = new BigInteger(
  "675618195835253179880837171299392507771890905955080501534281850915375053485"
);
const testEphemeralPublicB = new BigInteger(
  "259818372856658441059322975426701664195823614896234922316312240117075374058651775050153298943670121921012588312520831634744472789439309080290933872665909547529479001173172756591683484177690354651561249779647080228532415169855569958175332403542104976791129195931273773535182746909844150825887620429906410258293039741810014537045040934002923725150942873297299324812735705465999447443046674253654669648107920798123624312325706981260332375545322801826333020521267682115051585088344394997538583160803039839169250709917048254040791740307392210220236350436304469035006434726873787479774568075946572770662721238945272763086968417302986889972072174651723477664565143068740522831129602248524315156634644699608311455630064529445995723071949596135437963554872308635585279788247983889078907733098068371592788238854688139925633193527449131385466509162190394301302863089140517968299726030129598988515590615093839403850828095615667520926967989608086320691967993498387927143809759809904137660322771701977861398431125682816970710553291134412468072981760489244771380420182986927871320494142144969814907047113106724023289847195660905790056086209855473281101664009828410491016993425093315554512095173661582532795206889422458680452923178766942324547319860619288672379452315767364500797343422913200097524466739281071493170314733459570077983244929636246276106941043537559216815949804932939378793689722382396724149783912565604210693969199107720134490056072157217440302308330245817831537399290785604910772314364256852346581557386586192615111021042105032925500960706860638569776010285423560937525784857227702761617911613618959745872934840221354830082544311398724402813520359477981983856543849971873006977804791082495244157866662624150544948403822130076687433152957306793829393140342099225426063956430665678119412477520969056973511296573210230793693613569299265300055953647630402122475879430019086274991056908825363013881191690952984001769023502784600002108271396787016368454463491555821931908952396390148756274744139051616257241251041124456748645626639803059411282043718946076172216983736594787589410084424969873757920615807031515872724673636821530809468213069643542135938801847780662022346128462011143694711679497886797388060575122475263153550498078866742444067831565822176384703287299598486374089383658403826722299517689231836648457839110960541799513323897700059525250147886665459123325441612752661500235297558672414694263574825321841277494278670069182574588819505188920514688358370256507794"
);
const testX = new BigInteger(
  "66262195177575796662866065670574889627304328215079640145972312211323384584188"
);

const testGroup = knownGroups[8192];

const key = getKey({
  ephemeralPrivate: testEphemeralPrivate,
  ephemeralPublicB: testEphemeralPublicB,
  k: new BigInteger(
    "41355140986095207529712434517822669449058164734798422081556677809506232522678"
  ),
  x: testX,
  u: testU,
  group: testGroup,
});
